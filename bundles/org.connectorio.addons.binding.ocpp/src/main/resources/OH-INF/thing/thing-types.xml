<?xml version="1.0" encoding="UTF-8"?>
<!--
 - Copyright (C) 2022-2022 ConnectorIO Sp. z o.o.
 -
 - Licensed under the Apache License, Version 2.0 (the "License");
 - you may not use this file except in compliance with the License.
 - You may obtain a copy of the License at
 -
 -     http://www.apache.org/licenses/LICENSE-2.0
 -
 - Unless required by applicable law or agreed to in writing, software
 - distributed under the License is distributed on an "AS IS" BASIS,
 - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 - See the License for the specific language governing permissions and
 - limitations under the License.
 -
 - SPDX-License-Identifier: Apache-2.0
 -->
<thing:thing-descriptions bindingId="co7io-ocpp"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:thing="https://openhab.org/schemas/thing-description/v1.0.0"
  xsi:schemaLocation="https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd">

  <bridge-type id="server">
    <label>OCPP Server</label>
    <description>Defines a local control point for chargers to enable bidirectional communication.</description>

    <config-description>
      <parameter name="address" type="text" required="false">
        <label>Bind address</label>
        <description>IP or hostname used to launch server, if none given a primary network interface is being used.</description>
      </parameter>
      <parameter name="port" type="integer" required="false">
        <label>Server port</label>
        <description></description>
        <default>8887</default>
      </parameter>
      <parameter name="heartbeat" type="integer" required="true" min="1">
        <label>Default heartbeat</label>
        <description>
          A time (in seconds) under which chargers should send its heartbeat.
          This setting can be overridden at charger level.
        </description>
        <default>10</default>
        <unitLabel>s</unitLabel>
      </parameter>
      <parameter name="chargers" type="text" required="false" multiple="true">
        <label>Charger identities</label>
        <description>
          List of chargers which are permitted to connect to server. When empty all chargers can connect.
          If at least one entry is defined all incoming connections will be answered with "Rejected" state and closed.
        </description>
        <default></default>
      </parameter>
      <parameter name="tags" type="text" required="false" multiple="true">
        <label>RFID tags</label>
        <description>
          List of tags which are permitted to activate charging. If none given, no authentication is conducted.
          If at least one value is provided requests from unknown tags will be rejected.
        </description>
      </parameter>
    </config-description>
  </bridge-type>

  <bridge-type id="charger">
    <supported-bridge-type-refs>
      <bridge-type-ref id="server"/>
    </supported-bridge-type-refs>

    <label>Charger</label>
    <description>An instance of electric charger.</description>

    <config-description>
      <parameter name="serialNumber" type="text" required="true">
        <label>Charge point serial number</label>
        <description>Serial number of charge point (defined by manufacturer).</description>
      </parameter>
      <parameter name="heartbeat" type="integer" required="false" min="1">
        <label>Heartbeat</label>
        <description>
          A time (in seconds) under which this charger should send its heartbeat.
        </description>
        <default>10</default>
        <unitLabel>s</unitLabel>
      </parameter>
    </config-description>
  </bridge-type>

  <thing-type id="connector">
    <supported-bridge-type-refs>
      <bridge-type-ref id="charger"/>
    </supported-bridge-type-refs>

    <label>Connector</label>
    <description>A charger connector.</description>

    <channels>
      <channel id="chargePointStatus" typeId="chargePointStatus" />
      <channel id="transactionId" typeId="number">
        <label>Transaction id</label>
        <description>Current transaction.</description>
      </channel>
      <channel id="idTag" typeId="string">
        <label>Tag</label>
        <description>Tag identifier.</description>
      </channel>
      <channel id="timestampStart" typeId="dateTime">
        <label>Start timestamp</label>
        <description>Start timestamp of most recent transaction.</description>
      </channel>
      <channel id="timestampStop" typeId="dateTime">
        <label>Stop timestamp</label>
        <description>Stop timestamp of most recent transaction.</description>
      </channel>
      <channel id="meterStart" typeId="energy">
        <label>Meter start</label>
        <description>Value of meter energy reading at the start of transaction.</description>
      </channel>
      <channel id="meterStop" typeId="energy">
        <label>Meter stop</label>
        <description>Value of meter energy reading at the end of transaction.</description>
      </channel>

      <channel id="timestamp" typeId="dateTime">
        <label>Timestamp of samples being pushed to measurement channels.</label>
      </channel>
      <channel id="currentExport" typeId="current">
        <label>Current.Export</label>
        <description>Instantaneous current flow from EV</description>
      </channel>
      <channel id="currentImport" typeId="current">
        <label>Current.Import</label>
        <description>Instantaneous current flow to EV</description>
      </channel>
      <channel id="currentOffered" typeId="current">
        <label>Current.Offered</label>
        <description>Maximum current offered to EV</description>
      </channel>
      <channel id="energyActiveExport" typeId="energy">
        <label>Energy.Active.Export.Register</label>
        <description>Energy exported by EV (Wh or kWh)</description>
      </channel>
      <channel id="energyActiveImport" typeId="energy">
        <label>Energy.Active.Import.Register</label>
        <description>Energy imported by EV (Wh or kWh)</description>
      </channel>
      <channel id="energyReactiveExport" typeId="energy">
        <label>Energy.Reactive.Export.Register</label>
        <description>Reactive energy exported by EV (varh or kvarh)</description>
      </channel>
      <channel id="energyReactiveImport" typeId="energy">
        <label>Energy.Reactive.Import.Register</label>
        <description>Reactive energy imported by EV (varh or kvarh)</description>
      </channel>
      <channel id="energyActiveExportInterval" typeId="energy">
        <label>Energy.Active.Export.Interval</label>
        <description>Energy exported by EV (Wh or kWh)</description>
      </channel>
      <channel id="energyActiveImportInterval" typeId="energy">
        <label>Energy.Active.Import.Interval</label>
        <description>Energy imported by EV (Wh or kWh)</description>
      </channel>
      <channel id="energyReactiveExportInterval" typeId="energy">
        <label>Energy.Reactive.Export.Interval</label>
        <description>Reactive energy exported by EV. (varh or kvarh)</description>
      </channel>
      <channel id="energyReactiveImportInterval" typeId="energy">
        <label>Energy.Reactive.Import.Interval</label>
        <description>Reactive energy imported by EV. (varh or kvarh)</description>
      </channel>
      <channel id="frequency" typeId="frequency">
        <label>Frequency</label>
        <description>Instantaneous reading of powerline frequency</description>
      </channel>
      <channel id="powerActiveExport" typeId="power">
        <label>Power.Active.Export</label>
        <description>Instantaneous active power exported by EV. (W or kW)</description>
      </channel>
      <channel id="powerActiveImport" typeId="power">
        <label>Power.Active.Import</label>
        <description>Instantaneous active power imported by EV. (W or kW)</description>
      </channel>
      <channel id="powerFactor" typeId="number">
        <label>Power.Factor</label>
        <description>Instantaneous power factor of total energy flow</description>
      </channel>
      <channel id="powerOffered" typeId="power">
        <label>Power.Offered</label>
        <description>Maximum power offered to EV</description>
      </channel>
      <channel id="powerReactiveExport" typeId="power">
        <label>Power.Reactive.Export</label>
        <description>Instantaneous reactive power exported by EV. (var or kvar)</description>
      </channel>
      <channel id="powerReactiveImport" typeId="power">
        <label>Power.Reactive.Import</label>
        <description>Instantaneous reactive power imported by EV. (var or kvar)</description>
      </channel>
      <channel id="rpm" typeId="number">
        <label>RPM</label>
        <description>Fan speed in RPM</description>
      </channel>
      <channel id="soc" typeId="percent">
        <label>SoC</label>
        <description>State of charge of charging vehicle in percentage.</description>
      </channel>
      <channel id="temperature" typeId="temperature">
        <label>Temperature</label>
        <description>Temperature reading inside Charge Point.</description>
      </channel>
      <channel id="voltage" typeId="voltage">
        <label>Voltage</label>
        <description>Instantaneous AC RMS supply voltage</description>
      </channel>
    </channels>

    <config-description>
      <parameter name="connectorId" type="integer" required="true" min="1" step="1">
        <label>Connector</label>
        <description>Identifier of connector - starts from 1.</description>
      </parameter>
    </config-description>

  </thing-type>

</thing:thing-descriptions>
