openapi: 3.0.0
info:
  version: v1
  title: ""
paths:
  /api/AccessToken:
    put:
      tags:
        - AccessToken
      summary: Creates a Access Token to write on a Card (e.g. NFC)
      description: Creates a Access Token to write on a Card (e.g. NFC)
      operationId: AccessToken_Put
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessTokenToPut"
          text/json:
            schema:
              $ref: "#/components/schemas/AccessTokenToPut"
          application/xml:
            schema:
              $ref: "#/components/schemas/AccessTokenToPut"
          text/xml:
            schema:
              $ref: "#/components/schemas/AccessTokenToPut"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AccessTokenToPut"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
      deprecated: false
  /api/Account/login:
    get:
      tags:
        - Account
      operationId: Account_Login
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
      deprecated: false
    post:
      tags:
        - Account
      operationId: Account_Login
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
      deprecated: false
  "/api/Actions/{id}":
    get:
      tags:
        - Actions
      summary: Gets all available Actions of a Device
      description: Gets all available Actions of a Device
      operationId: Actions_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActionInformation"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActionInformation"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActionInformation"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ActionInformation"
      deprecated: false
  /api/Actions:
    post:
      tags:
        - Actions
      summary: Set an action for the specified device.
      description: Set an action for the specified device.
      operationId: Actions_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActionToPost"
          text/json:
            schema:
              $ref: "#/components/schemas/ActionToPost"
          application/xml:
            schema:
              $ref: "#/components/schemas/ActionToPost"
          text/xml:
            schema:
              $ref: "#/components/schemas/ActionToPost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ActionToPost"
        description: The Action Data
        required: true
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/AdditionalDeviceInformation/{id}":
    get:
      tags:
        - AdditionalDeviceInformation
      summary: Gets the additional information (e.g. Firmware Version) about a device.
      description: Gets the additional information (e.g. Firmware Version) about a device.
      operationId: AdditionalDeviceInformation_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdditionalDeviceInformation"
            text/json:
              schema:
                $ref: "#/components/schemas/AdditionalDeviceInformation"
      deprecated: false
  /api/CustomDevice:
    get:
      tags:
        - CustomDevice
      summary: Gets all Custom Devices
      description: Gets all Devices
      operationId: CustomDevice_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomDeviceToPost"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomDeviceToPost"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomDeviceToPost"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomDeviceToPost"
      deprecated: false
    post:
      tags:
        - CustomDevice
      summary: Creates or updates a Custom Device or updates it's values.
      description: "Creates or updates a Custom Device or updates it's values.\r

        \            A Custom Device can be any device that like to add
        some measurement values to the smart-me Cloud.\r

        \            Only use a custom device for all non meters.\r

        \            For a new device leave the ID empty. To create a
        device you have to set the DeviceEnergyType.\r

        \            To update values, add the ID of the device and the
        values you like to set.  (See the Data Type Model for more Information)"
      operationId: CustomDevice_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomDeviceToPost"
          text/json:
            schema:
              $ref: "#/components/schemas/CustomDeviceToPost"
          application/xml:
            schema:
              $ref: "#/components/schemas/CustomDeviceToPost"
          text/xml:
            schema:
              $ref: "#/components/schemas/CustomDeviceToPost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CustomDeviceToPost"
        description: Device object with all the data
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
            application/xml:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
            text/xml:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
        "401":
          description: Unauthorized
      deprecated: false
  "/api/CustomDevice/{id}":
    get:
      tags:
        - CustomDevice
      summary: Gets a Custom Device by it's ID
      description: Gets a Device by it's ID
      operationId: CustomDevice_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
            text/json:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
            application/xml:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
            text/xml:
              schema:
                $ref: "#/components/schemas/CustomDeviceToPost"
      deprecated: false
  /api/DeviceBySerial:
    get:
      tags:
        - DeviceBySerial
      summary: Gets a Device by it's Serial Number. The Serial is the part before the
        "-".
      description: Gets a Device by it's Serial Number. The Serial is the part before the
        "-".
      operationId: DeviceBySerial_Get
      parameters:
        - name: serial
          in: query
          description: The Serial Number of the device
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
            text/json:
              schema:
                $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                $ref: "#/components/schemas/Device"
      deprecated: false
  /api/Devices:
    get:
      tags:
        - Devices
      summary: Gets all Devices
      description: Gets all Devices
      operationId: Devices_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      deprecated: false
    post:
      tags:
        - Devices
      summary: Creates or updates a Device or updates it's values.
      description: "Creates or updates a Device or updates it's values. \r

        \            For a new device leave the ID empty. To create a
        device you have to set the DeviceEnergyType.\r

        \            To update values, add the ID of the device and the
        values you like to set.  (See the Data Type Model for more Information)"
      operationId: Devices_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceToPost"
          text/json:
            schema:
              $ref: "#/components/schemas/DeviceToPost"
          application/xml:
            schema:
              $ref: "#/components/schemas/DeviceToPost"
          text/xml:
            schema:
              $ref: "#/components/schemas/DeviceToPost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DeviceToPost"
        description: Device object with all the data
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceToPost"
            text/json:
              schema:
                $ref: "#/components/schemas/DeviceToPost"
            application/xml:
              schema:
                $ref: "#/components/schemas/DeviceToPost"
            text/xml:
              schema:
                $ref: "#/components/schemas/DeviceToPost"
        "401":
          description: Unauthorized
      deprecated: false
  "/api/Devices/{id}":
    get:
      tags:
        - Devices
      summary: Gets a Device by it's ID
      description: Gets a Device by it's ID
      operationId: Devices_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
            text/json:
              schema:
                $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                $ref: "#/components/schemas/Device"
      deprecated: false
    put:
      tags:
        - Devices
      summary: "Updates the On/Off Switch on a device. \r

        \            For new implementations please use the \"actions\"
        command"
      description: "Updates the On/Off Switch on a device\r

        \            For new implementations please use the \"actions\"
        command"
      operationId: Devices_Put
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
        - name: switchState
          in: query
          description: The new state of the switch
          required: true
          schema:
            type: boolean
        - name: switchNumber
          in: query
          description: The number of the switch if there are multiple (1 for L1, 3 for L3)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
        "401":
          description: Unauthorized
        "405":
          description: MethodNotAllowed
      deprecated: false
  /api/DevicesByEnergy:
    get:
      tags:
        - DevicesByEnergy
      summary: Gets all Devices for an Energy Type
      description: Gets all Devices for an Etoolnergy Type
      operationId: DevicesByEnergy_Get
      parameters:
        - name: meterEnergyType
          in: query
          required: true
          schema:
            type: string
            enum:
              - MeterTypeUnknown
              - MeterTypeElectricity
              - MeterTypeWater
              - MeterTypeGas
              - MeterTypeHeat
              - MeterTypeHCA
              - MeterTypeAllMeters
              - MeterTypeTemperature
              - MeterTypeMBusGateway
              - MeterTypeRS485Gateway
              - MeterTypeCustomDevice
              - MeterTypeCompressedAir
              - MeterTypeSolarLog
              - MeterTypeVirtualMeter
              - MeterTypeWMBusGateway
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      deprecated: false
  /api/DevicesBySubType:
    get:
      tags:
        - DevicesBySubType
      summary: Gets all Devices by it's Sub Type (e.g. E-Charging Station)
      description: Gets all Devices by it's Sub Type (e.g. E-Charging Station)
      operationId: DevicesBySubType_Get
      parameters:
        - name: meterSubType
          in: query
          required: true
          schema:
            type: string
            enum:
              - MeterSubTypeUnknown
              - MeterSubTypeCold
              - MeterSubTypeHeat
              - MeterSubTypeChargingStation
              - MeterSubTypeElectricity
              - MeterSubTypeWater
              - MeterSubTypeGas
              - MeterSubTypeElectricityHeat
              - MeterSubTypeTemperature
              - MeterSubTypeVirtualBattery
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      deprecated: false
  "/api/FastSendDeviceValues/{id}":
    get:
      tags:
        - FastSendDeviceValues
      summary: "Force a device to send the data every second (if supported). This for
        about 30s.\r

        \            Don't use this call to force a device to send the
        data every second for a longer time."
      operationId: FastSendDeviceValues_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/Folder/{id}":
    get:
      tags:
        - Folder
      summary: Gets the Values for a folder or a meter
      description: Gets the Values for a folder or a meter
      operationId: Folder_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderData"
            text/json:
              schema:
                $ref: "#/components/schemas/FolderData"
      deprecated: false
  /api/folder/assign:
    post:
      tags:
        - FolderAssign
      summary: Assign a folder (source) or meter to another folder (target). Can be
        used to create a folder structure.
      operationId: FolderAssign_Post
      parameters:
        - name: source
          in: query
          description: The ID of the meter or folder that should be assign
          required: true
          schema:
            type: string
        - name: target
          in: query
          description: The ID of the meter or folder that should be the parent
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
  /api/FolderMenu:
    get:
      tags:
        - FolderMenu
      summary: Gets the folder menu items (each item might contain child items)
      operationId: FolderMenu_Get
      parameters:
        - name: filter
          in: query
          description: "(optional) Filter for the folders and meters: \r

            \            all: load everything\r

            \            assigned: load only folders and meters that
            are assigend to a folder\r

            \            unassigend: load only meters that are not
            assigend to a folder\r

            \            user: load only folder and all users
            assigned to this folders\r

            \            subuserlist: load all subusers as a list"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderMenuConfiguration"
            text/json:
              schema:
                $ref: "#/components/schemas/FolderMenuConfiguration"
            application/xml:
              schema:
                $ref: "#/components/schemas/FolderMenuConfiguration"
            text/xml:
              schema:
                $ref: "#/components/schemas/FolderMenuConfiguration"
      deprecated: false
    post:
      tags:
        - FolderMenu
      summary: Creates and updates the folder menu items
      operationId: FolderMenu_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderMenuConfiguration"
          text/json:
            schema:
              $ref: "#/components/schemas/FolderMenuConfiguration"
          application/xml:
            schema:
              $ref: "#/components/schemas/FolderMenuConfiguration"
          text/xml:
            schema:
              $ref: "#/components/schemas/FolderMenuConfiguration"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/FolderMenuConfiguration"
        required: true
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/folder/settings/{id}":
    get:
      tags:
        - FolderSettings
      summary: Gets the settings of a folder or meter
      operationId: FolderSettings_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderSettings"
            text/json:
              schema:
                $ref: "#/components/schemas/FolderSettings"
            application/xml:
              schema:
                $ref: "#/components/schemas/FolderSettings"
            text/xml:
              schema:
                $ref: "#/components/schemas/FolderSettings"
      deprecated: false
    post:
      tags:
        - FolderSettings
      summary: Add or edit a folder or a meter. To add a new folder use and empty ID
      operationId: FolderSettings_Post
      parameters:
        - name: id
          in: path
          description: The ID of the folder or meter to edit. Use and empty ID to add a new
            folder
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderSettings"
          text/json:
            schema:
              $ref: "#/components/schemas/FolderSettings"
          application/xml:
            schema:
              $ref: "#/components/schemas/FolderSettings"
          text/xml:
            schema:
              $ref: "#/components/schemas/FolderSettings"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/FolderSettings"
        description: The folder or meter data
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FolderMenuItem"
            text/json:
              schema:
                $ref: "#/components/schemas/FolderMenuItem"
            application/xml:
              schema:
                $ref: "#/components/schemas/FolderMenuItem"
            text/xml:
              schema:
                $ref: "#/components/schemas/FolderMenuItem"
      deprecated: false
    delete:
      tags:
        - FolderSettings
      summary: Deletes a folder
      operationId: FolderSettings_Delete
      parameters:
        - name: id
          in: path
          description: The ID of the folder
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
  /api/Health:
    get:
      tags:
        - Health
      summary: "A method returning HTTP 200 OK when queried.\r

        \            It is used by Kubernetes probes to determine
        whether the app is healthy."
      operationId: Health_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
      deprecated: false
  /api/MBus:
    post:
      tags:
        - MBus
      summary: "M-BUS API: Adds data of a M-BUS Meter to the smart-me Cloud.\r

        \            Just send us the M-BUS Telegram (RSP_UD) and we
        will do the Rest."
      description: "M-BUS API: Adds data of a M-BUS Meter to the smart-me Cloud.\r

        \            Just send us the M-BUS Telegram (RSP_UD) and we
        will do the Rest."
      operationId: MBus_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MBusData"
          text/json:
            schema:
              $ref: "#/components/schemas/MBusData"
          application/xml:
            schema:
              $ref: "#/components/schemas/MBusData"
          text/xml:
            schema:
              $ref: "#/components/schemas/MBusData"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/MBusData"
        description: The M-BUS Telegram
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
        "400":
          description: BadRequest
        "401":
          description: Unauthorized
      deprecated: false
  "/api/MeterFolderInformation/{id}":
    get:
      tags:
        - MeterFolderInformation
      summary: "Beta: Gets the General Information for a Meter or a Folder"
      description: "Beta: Gets the General Information for a Meter or a Folder"
      operationId: MeterFolderInformation_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeterFolderInformation"
            text/json:
              schema:
                $ref: "#/components/schemas/MeterFolderInformation"
            application/xml:
              schema:
                $ref: "#/components/schemas/MeterFolderInformation"
            text/xml:
              schema:
                $ref: "#/components/schemas/MeterFolderInformation"
      deprecated: false
  /api/MeterFolderInformation:
    post:
      tags:
        - MeterFolderInformation
      summary: Sets the Name of a Meter or a Folder
      description: Sets the Name of a Meter or a Folder
      operationId: MeterFolderInformation_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeterFolderInformationToPost"
          text/json:
            schema:
              $ref: "#/components/schemas/MeterFolderInformationToPost"
          application/xml:
            schema:
              $ref: "#/components/schemas/MeterFolderInformationToPost"
          text/xml:
            schema:
              $ref: "#/components/schemas/MeterFolderInformationToPost"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/MeterFolderInformationToPost"
        required: true
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/MeterValues/{id}":
    get:
      tags:
        - MeterValues
      summary: "Gets the Values for a Meter at a given Date. \r

        \            The first Value found before the given Date is
        returned."
      description: Gets the Values for a Meter at a given Date. The first Value found
        before the given Date is returned.
      operationId: MeterValues_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeviceInPast"
            text/json:
              schema:
                $ref: "#/components/schemas/DeviceInPast"
            application/xml:
              schema:
                $ref: "#/components/schemas/DeviceInPast"
            text/xml:
              schema:
                $ref: "#/components/schemas/DeviceInPast"
      deprecated: false
  /api/oauth/authorize:
    get:
      tags:
        - OAuth
      operationId: OAuth_Authorize
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          required: false
          schema:
            type: string
        - name: client_secret
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
      deprecated: false
    post:
      tags:
        - OAuth
      operationId: OAuth_Authorize
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          required: false
          schema:
            type: string
        - name: client_secret
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
      deprecated: false
  /api/pico:
    get:
      tags:
        - Pico
      summary: Gets all pico charging stations for this user
      operationId: Pico_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      deprecated: false
  "/api/pico/charging/{id}":
    get:
      tags:
        - PicoCharging
      summary: Gets the active charging data of a pico station
      operationId: PicoCharging_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PicoChargingData"
            text/json:
              schema:
                $ref: "#/components/schemas/PicoChargingData"
      deprecated: false
  "/api/pico/history/{id}":
    get:
      tags:
        - PicoChargingHistory
      summary: Gets the last charging history for a pico station
      operationId: PicoChargingHistory_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoChargingHistoryData"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoChargingHistoryData"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoChargingHistoryData"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoChargingHistoryData"
      deprecated: false
  "/api/pico/loadmanagementgroup/{id}":
    get:
      tags:
        - PicoLoadmanagementGroup
      summary: "GET: api/pico/loadmanagementgroup\r

        \            \r

        \            Returns a pico load management group by it's id"
      operationId: PicoLoadmanagementGroup_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
            text/json:
              schema:
                $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
            text/xml:
              schema:
                $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
      deprecated: false
  /api/pico/loadmanagementgroup:
    get:
      tags:
        - PicoLoadmanagementGroup
      summary: "GET: api/pico/loadmanagementgroup\r

        \            \r

        \            Returns all available load management groups"
      operationId: PicoLoadmanagementGroup_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PicoLoadmanagementGroupDto"
      deprecated: false
  "/api/pico/loadmanagementgroup/current/{serial}":
    post:
      tags:
        - PicoLoadmanagementSetDynamicCurrent
      summary: Sets the dynamic current of a load management group or a single station.
      operationId: PicoLoadmanagementSetDynamicCurrent_Post
      parameters:
        - name: serial
          in: path
          description: The serial number can be any pico serial in the group (e.g. 700001)
          required: true
          schema:
            type: integer
            format: int64
        - name: current
          in: query
          description: The dynamic current of the group (in mA)
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
      deprecated: false
  "/api/pico/settings/{id}":
    get:
      tags:
        - PicoSettings
      summary: "GET: api/pico/settings\r

        \            \r

        \            Returns the settings of a pico charging station."
      operationId: PicoSettings_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PicoSettingsDto"
            text/json:
              schema:
                $ref: "#/components/schemas/PicoSettingsDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/PicoSettingsDto"
            text/xml:
              schema:
                $ref: "#/components/schemas/PicoSettingsDto"
      deprecated: false
  /api/RegisterForRealtimeApi:
    get:
      tags:
        - RegisterForRealtimeApi
      summary: Gets all registrations for the Realtime API.
      description: Gets all registrations for the Realtime API.
      operationId: RegisterForRealtimeApi_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegisterRealtimeApiData"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegisterRealtimeApiData"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegisterRealtimeApiData"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegisterRealtimeApiData"
      deprecated: false
    post:
      tags:
        - RegisterForRealtimeApi
      summary: "Creates a new registration for the realtime API. The Realtime API sends
        you the data of the registred devices as soon as we have them on the
        cloud.\r

        \             More Information about the realtime API:
        https://www.smart-me.com/Description/api/realtimeapi.aspx"
      description: "Creates a new registration for the realtime API. The Realtime API sends
        you the data of the registred devices as soon as we have them on the
        cloud. More Information about the realtime API:
        https://www.smart-me.com/Description/api/realtimeapi.aspx"
      operationId: RegisterForRealtimeApi_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRealtimeApiData"
          text/json:
            schema:
              $ref: "#/components/schemas/RegisterRealtimeApiData"
          application/xml:
            schema:
              $ref: "#/components/schemas/RegisterRealtimeApiData"
          text/xml:
            schema:
              $ref: "#/components/schemas/RegisterRealtimeApiData"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RegisterRealtimeApiData"
        required: true
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/RegisterForRealtimeApi/{id}":
    delete:
      tags:
        - RegisterForRealtimeApi
      summary: Deletes a realtime API registration.
      description: Deletes a realtime API registration.
      operationId: RegisterForRealtimeApi_Delete
      parameters:
        - name: id
          in: path
          description: The ID of the realtime API registration
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/SmartMeDeviceConfiguration/{id}":
    get:
      tags:
        - SmartMeDeviceConfiguration
      summary: Gets the configuration of a smart-me device.
      operationId: SmartMeDeviceConfiguration_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
            text/json:
              schema:
                $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
            application/xml:
              schema:
                $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
            text/xml:
              schema:
                $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
      deprecated: false
  /api/SmartMeDeviceConfiguration:
    post:
      tags:
        - SmartMeDeviceConfiguration
      summary: Sets the configuration of a smart-me device. The device needs to be
        online.
      operationId: SmartMeDeviceConfiguration_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
          text/json:
            schema:
              $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
          application/xml:
            schema:
              $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
          text/xml:
            schema:
              $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SmartMeDeviceConfigurationContainer"
        required: true
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/SubUser/{id}":
    get:
      tags:
        - SubUser
      summary: Get a sub user. The user must be assigend to the user that makes this
        call.
      operationId: SubUser_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubUserData"
            text/json:
              schema:
                $ref: "#/components/schemas/SubUserData"
            application/xml:
              schema:
                $ref: "#/components/schemas/SubUserData"
            text/xml:
              schema:
                $ref: "#/components/schemas/SubUserData"
      deprecated: false
    delete:
      tags:
        - SubUser
      summary: Delete a subuser
      operationId: SubUser_Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
  /api/SubUser:
    post:
      tags:
        - SubUser
      summary: "Creates or updates a subuser.\r

        \            To create a new user set no ID (empty)"
      operationId: SubUser_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubUserData"
          text/json:
            schema:
              $ref: "#/components/schemas/SubUserData"
          application/xml:
            schema:
              $ref: "#/components/schemas/SubUserData"
          text/xml:
            schema:
              $ref: "#/components/schemas/SubUserData"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SubUserData"
        required: true
      responses:
        "204":
          description: No Content
      deprecated: false
  /api/User:
    get:
      tags:
        - User
      summary: Gets the informations for the user.
      description: Gets the informations for the user.
      operationId: User_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            text/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            text/xml:
              schema:
                $ref: "#/components/schemas/User"
      deprecated: false
  /api/folder/user/assign:
    post:
      tags:
        - UserToFolderAssign
      summary: Assign a user to a folder
      operationId: UserToFolderAssign_Post
      parameters:
        - name: source
          in: query
          description: The ID of the user that should be assign
          required: true
          schema:
            type: string
        - name: target
          in: query
          description: The ID of the folder that should be the parent
          required: true
          schema:
            type: string
        - name: oldFolder
          in: query
          description: The ID of the old folder (in case of a drag and drop to a new folder)
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
    delete:
      tags:
        - UserToFolderAssign
      summary: Deletes a user to folder assignement
      operationId: UserToFolderAssign_Delete
      parameters:
        - name: source
          in: query
          description: The ID of the user that should be de-assign
          required: true
          schema:
            type: string
        - name: target
          in: query
          description: The ID of the folder
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
      deprecated: false
  "/api/Values/{id}":
    get:
      tags:
        - Values
      summary: Gets all (last) values of a device
      operationId: Values_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValuesData"
            text/json:
              schema:
                $ref: "#/components/schemas/ValuesData"
      deprecated: false
  "/api/ValuesInPast/{id}":
    get:
      tags:
        - ValuesInPast
      summary: "Gets all (last) values of a device\r

        \            The first Value found before the given Date is
        returned."
      description: Gets the Values for a device at a given Date. The first Value found
        before the given Date is returned.
      operationId: ValuesInPast_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: the date of the value
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValuesData"
            text/json:
              schema:
                $ref: "#/components/schemas/ValuesData"
      deprecated: false
  "/api/ValuesInPastMultiple/{id}":
    get:
      tags:
        - ValuesInPastMultiple
      summary: Gets multiple values of a device. This call needs a smart-me
        professional licence.
      operationId: ValuesInPastMultiple_Get
      parameters:
        - name: id
          in: path
          description: The ID of the device
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          description: The date when the first value should start
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: The date when the last value should start
          required: true
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          description: The interval in minutes betwenn the values. 0 means as fast as
            possible. Only 1000 values can be get in one call.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValuesData"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValuesData"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValuesData"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValuesData"
      deprecated: false
  /api/VirtualBillingMeterActive:
    get:
      tags:
        - VirtualBillingMeterActive
      summary: "Beta: Gets all active virtual meters"
      description: "Beta: Gets all active virtual meters."
      operationId: VirtualBillingMeterActive_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      deprecated: false
    post:
      tags:
        - VirtualBillingMeterActive
      summary: "Beta: Virtual Meter API: Activates a Meter and add the Consumption to a
        Virtual Meter assosiated with the User."
      description: "Beta: Virtual Meter API: Activates a Meter and add the Consumption to a
        Virtual Meter assosiated with the User."
      operationId: VirtualBillingMeterActive_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VMeterToActivate"
          text/json:
            schema:
              $ref: "#/components/schemas/VMeterToActivate"
          application/xml:
            schema:
              $ref: "#/components/schemas/VMeterToActivate"
          text/xml:
            schema:
              $ref: "#/components/schemas/VMeterToActivate"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VMeterToActivate"
        description: The Meter to activate
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
            text/json:
              schema:
                $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                $ref: "#/components/schemas/Device"
        "400":
          description: BadRequest
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      deprecated: false
  /api/VirtualBillingMeterDeactivate:
    post:
      tags:
        - VirtualBillingMeterDeactivate
      summary: "Beta: Virtual Meter API: Deactivates a Virtual Meter."
      description: "Beta: Virtual Meter API: Deactivates a Virtual Meter."
      operationId: VirtualBillingMeterDeactivate_Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VMeterToDeactivate"
          text/json:
            schema:
              $ref: "#/components/schemas/VMeterToDeactivate"
          application/xml:
            schema:
              $ref: "#/components/schemas/VMeterToDeactivate"
          text/xml:
            schema:
              $ref: "#/components/schemas/VMeterToDeactivate"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VMeterToDeactivate"
        description: The Meter to activate
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
        "400":
          description: BadRequest
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      deprecated: false
  /api/VirtualBillingMeters:
    get:
      tags:
        - VirtualBillingMeters
      summary: "Beta: Gets all Meters available to activate as a Virtual Meter."
      description: "Beta: Gets all Meters available to activate as a Virtual Meter."
      operationId: VirtualBillingMeters_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
      deprecated: false
  /api/VirtualMeterCalculateFormula:
    get:
      tags:
        - VirtualMeterCalculateFormula
      summary: "Calculates a virtual meter from a formula. \r

        \            A meter is coded as ID(\"METERID\")"
      description: "Calculates a virtual meter from a formula.\r

        \            \r

        \            A meter is coded as ID(\"METERID\")\r

        \            Ariphmetical operators:\r

        \             ()  parentheses;  \r

        \             +   plus (a + b); \r

        \             -  minus (a - b); \r

        \             *  multiplycation symbol (a * b); \r

        \             /  divide symbol (a / b); \r

        \            Example:
        (ID(\"63ac09cb-4e5f-4f3e-bd27-ad8c30bdfc0c\") +
        ID(\"0209555e-9dc4-4e84-a166-a864488b4b12\")) * 2"
      operationId: VirtualMeterCalculateFormula_Get
      parameters:
        - name: formula
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
            text/json:
              schema:
                $ref: "#/components/schemas/Device"
            application/xml:
              schema:
                $ref: "#/components/schemas/Device"
            text/xml:
              schema:
                $ref: "#/components/schemas/Device"
      deprecated: false
  /api/VirtualTariff:
    get:
      tags:
        - VirtualTariff
      summary: Gets all Virtual Tariffs of a user
      description: Gets all Virtual Tariffs of a user
      operationId: VirtualTariff_Get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
      deprecated: false
  "/api/VirtualTariff/{id}":
    get:
      tags:
        - VirtualTariff
      summary: Gets all virtual tariffs of a folder
      description: Gets all virtual tariffs of a folder
      operationId: VirtualTariff_Get
      parameters:
        - name: id
          in: path
          description: The ID of the Folder
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VirtualTariffsOfFolder"
            text/json:
              schema:
                $ref: "#/components/schemas/VirtualTariffsOfFolder"
            application/xml:
              schema:
                $ref: "#/components/schemas/VirtualTariffsOfFolder"
            text/xml:
              schema:
                $ref: "#/components/schemas/VirtualTariffsOfFolder"
      deprecated: false
  /api/VirtualTariffConsumption:
    get:
      tags:
        - VirtualTariffConsumption
      summary: Gets the consumption of a folder with a virtuall tariffs.
      description: Gets the consumption of a folder with a virtuall tariffs.
      operationId: VirtualTariffConsumption_Get
      parameters:
        - name: folderId
          in: query
          description: The ID of the Folder
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          description: The start date (UTC)
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: The end date (UTC)
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffConsumptionData"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffConsumptionData"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffConsumptionData"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffConsumptionData"
      deprecated: false
  "/api/VirtualTariffsForProperty/{id}":
    get:
      tags:
        - VirtualTariffsForProperty
      summary: Gets all Virtual Tariffs for a property (folder)
      description: Gets all Virtual Tariffs for a property (folder)
      operationId: VirtualTariffsForProperty_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VirtualTariffsOfFolder"
      deprecated: false
  "/api/VirtualTariffsStatusForProperty/{id}":
    get:
      tags:
        - VirtualTariffsStatusForProperty
      summary: Gets the calculation status for a virtual tariff property
      operationId: VirtualTariffsStatusForProperty_Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
      deprecated: false
servers:
  - url: https://smart-me.com:443
components:
  securitySchemes:
    basic:
      type: http
      description: Basic HTTP Authentication
      scheme: basic
  schemas:
    AccessTokenToPut:
      description: Container Class for the Put action of an Access Token
      type: object
      properties:
        UserId:
          format: int64
          description: "The ID of the User. The credentials provided must have permission
            to edit the user.\r

            \            If no ID is provided, the user in the
            credentials is taken."
          type: integer
        CardId:
          format: int64
          description: The ID of the Card
          type: integer
    Object:
      type: object
      properties: {}
    ActionInformation:
      description: The Information about an Action of a device
      type: object
      properties:
        Name:
          description: The Name of this action
          type: string
        ObisCode:
          description: The Obis Code of this action. This is used as ID.
          type: string
        ActionType:
          description: The Type of this action.
          enum:
            - OnOffAction
            - AnalogAction
          type: string
        MinValue:
          format: double
          description: The minimum value of this action (e.g. for an AnalogAction)
          type: number
        MaxValue:
          format: double
          description: The maximum value of this action (e.g. for an AnalogAction)
          type: number
    ActionToPost:
      description: Container Class for an action to post
      type: object
      properties:
        DeviceID:
          description: The ID of the Device
          type: string
        Actions:
          description: List with all Actions for this device
          type: array
          items:
            $ref: "#/components/schemas/ActionToPostItem"
    ActionToPostItem:
      description: Container class for an action item
      type: object
      properties:
        ObisCode:
          description: The ObisCode (ID) of the Action
          type: string
        Value:
          format: double
          description: The Value to Post
          type: number
    AdditionalDeviceInformation:
      description: Additional Information For a device
      type: object
      properties:
        ID:
          description: The ID of the device
          type: string
        HardwareVersion:
          format: int32
          description: The Hardware Version of a Meter.
          type: integer
        FirmwareVersion:
          format: int32
          description: The Firmware Version of a Meter
          type: integer
        AdditionalMeterSerialNumber:
          description: An additional Meter serial number. e.g. the number of a meter a
            smart-me device is connected to.
          type: string
        NetworkConnection:
          description: "The mode how the device is connected to the network. Valid values
            are:\r

            \            wifi, gprs, ltecatm1, ltenbiot, meshmobile,
            meshwifi"
          type: string
        NetworkConnectionRSSI:
          format: int32
          description: The connection RSSI value (0 is bad, 100 is best)
          type: integer
    CustomDeviceToPost:
      description: Container Class for the Web API
      type: object
      properties:
        Id:
          description: The ID of the device
          type: string
        Name:
          description: The Name of the Device
          type: string
        Serial:
          format: int64
          description: The Serial number
          type: integer
        Values:
          description: The Values of the custom Device
          type: array
          items:
            $ref: "#/components/schemas/CustomDeviceValues"
        ValueDate:
          format: date-time
          description: The Date of the Value (in UTC). If this is null the Server Time is
            used.
          type: string
    CustomDeviceValues:
      description: Container Class for the Custom Device Values
      type: object
      properties:
        Name:
          description: The Name of the Value.
          type: string
        Value:
          format: double
          description: The Value
          type: number
    Device:
      description: Container Class for the Web API
      type: object
      properties:
        Id:
          description: The ID of the device
          type: string
        Name:
          description: The Name of the Device
          type: string
        Serial:
          format: int64
          description: The Serial number
          type: integer
        DeviceEnergyType:
          description: The Energy Type of this device
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
            - 12
            - 13
            - 14
          x-enum-varnames:
            - MeterTypeUnknown
            - MeterTypeElectricity
            - MeterTypeWater
            - MeterTypeGas
            - MeterTypeHeat
            - MeterTypeHCA
            - MeterTypeAllMeters
            - MeterTypeTemperature
            - MeterTypeMBusGateway
            - MeterTypeRS485Gateway
            - MeterTypeCustomDevice
            - MeterTypeCompressedAir
            - MeterTypeSolarLog
            - MeterTypeVirtualMeter
            - MeterTypeWMBusGateway
          type: integer
        MeterSubType:
          description: The sub meter type (e.g. warmwater or coldwater)
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
          x-enum-varnames:
            - MeterSubTypeUnknown
            - MeterSubTypeCold
            - MeterSubTypeHeat
            - MeterSubTypeChargingStation
            - MeterSubTypeElectricity
            - MeterSubTypeWater
            - MeterSubTypeGas
            - MeterSubTypeElectricityHeat
            - MeterSubTypeTemperature
            - MeterSubTypeVirtualBattery
          type: integer
        FamilyType:
          description: The Family Type of the device.
          enum:
            - 1001
          x-enum-varnames:
            - MeterFamilyTypeUnknown
          type: string
        ActivePower:
          format: double
          description: The Actvie Power or current flow rate
          type: number
        ActivePowerL1:
          format: double
          description: The Actvie Power Phase L1
          type: number
        ActivePowerL2:
          format: double
          description: The Actvie Power Phase L2
          type: number
        ActivePowerL3:
          format: double
          description: The Actvie Power Phase L3
          type: number
        ActivePowerUnit:
          description: The Unit of the Active Power Value
          type: string
        CounterReading:
          format: double
          description: The Meter Counter Reading (Total Energy used)
          type: number
        CounterReadingUnit:
          description: The Unit of the Counter Reading
          type: string
        CounterReadingT1:
          format: double
          description: The Meter Counter Reading Tariff 1
          type: number
        CounterReadingT2:
          format: double
          description: The Meter Counter Reading Tariff 2
          type: number
        CounterReadingT3:
          format: double
          description: The Meter Counter Reading Tariff 3
          type: number
        CounterReadingT4:
          format: double
          description: The Meter Counter Reading Tariff 4
          type: number
        CounterReadingImport:
          format: double
          description: The Meter Counter Reading only import
          type: number
        CounterReadingExport:
          format: double
          description: The Meter Counter Reading only export
          type: number
        SwitchOn:
          description: Flag if the Switch is on on this device.
          type: boolean
        SwitchPhaseL1On:
          description: Flag if the Phase L1 is on on this device.
          type: boolean
        SwitchPhaseL2On:
          description: Flag if the Phase L2 is on on this device.
          type: boolean
        SwitchPhaseL3On:
          description: Flag if the Phase L3 is on on this device.
          type: boolean
        Voltage:
          format: double
          description: The Voltage (in V)
          type: number
        VoltageL1:
          format: double
          description: The Voltage Phase L1 (in V)
          type: number
        VoltageL2:
          format: double
          description: The Voltage Phase L2 (in V)
          type: number
        VoltageL3:
          format: double
          description: The Voltage Phase L3 (in V)
          type: number
        Current:
          format: double
          description: The Current (in A)
          type: number
        CurrentL1:
          format: double
          description: The Current Phase L1 (in A)
          type: number
        CurrentL2:
          format: double
          description: The Current Phase L2 (in A)
          type: number
        CurrentL3:
          format: double
          description: The Current Phase L3 (in A)
          type: number
        PowerFactor:
          format: double
          description: "The Power Factor (cos phi). Range: 0 - 1"
          type: number
        PowerFactorL1:
          format: double
          description: "The Power Factor (cos phi) Phase L1. Range: 0 - 1"
          type: number
        PowerFactorL2:
          format: double
          description: "The Power Factor (cos phi) Phase L2. Range: 0 - 1"
          type: number
        PowerFactorL3:
          format: double
          description: "The Power Factor (cos phi) Phase L3. Range: 0 - 1"
          type: number
        Temperature:
          format: double
          description: The Temperature (in degree celsius)
          type: number
        ActiveTariff:
          format: int32
          description: The Number of the Active Tariff
          type: integer
        DigitalOutput1:
          description: The digital output number 1
          type: boolean
        DigitalOutput2:
          description: The digital output number 2
          type: boolean
        AnalogOutput1:
          format: int32
          description: The analog output number 1 (PWM signal) (0 - 32183)
          type: integer
        AnalogOutput2:
          format: int32
          description: The analog output number 2 (PWM signal) (0 - 32183)
          type: integer
        DigitalInput1:
          description: The digital input number 1
          type: boolean
        DigitalInput2:
          description: The digital input number 2
          type: boolean
        ValueDate:
          format: date-time
          description: Time of last successful connection the the smart-me Cloud.
          type: string
        AdditionalMeterSerialNumber:
          description: An additional Meter serial number. e.g. the number of a meter a
            smart-me device is connected to.
          type: string
        FlowRate:
          format: double
          description: The current flow rate (e.g. m3/h)
          type: number
        ChargingStationState:
          description: The state of a pico charging station. (Only available for pico
            charging stations)
          enum:
            - Booting
            - ReadyNoCarConnected
            - ReadyCarConnected
            - StartedWaitForCar
            - Charging
            - Installation
            - Authorize
            - Offline
          type: string
    DeviceToPost:
      description: Container Class for the Web API
      type: object
      properties:
        Id:
          description: The ID of the device
          type: string
        Name:
          description: The Name of the Device
          type: string
        Serial:
          format: int64
          description: The Serial number
          type: integer
        DeviceEnergyType:
          description: The Energy Type of this device
          enum:
            - MeterTypeUnknown
            - MeterTypeElectricity
            - MeterTypeWater
            - MeterTypeGas
            - MeterTypeHeat
            - MeterTypeHCA
            - MeterTypeAllMeters
            - MeterTypeTemperature
            - MeterTypeMBusGateway
            - MeterTypeRS485Gateway
            - MeterTypeCustomDevice
            - MeterTypeCompressedAir
            - MeterTypeSolarLog
            - MeterTypeVirtualMeter
            - MeterTypeWMBusGateway
          type: string
        MeterSubType:
          description: The Sub Type of this Meter.
          enum:
            - MeterSubTypeUnknown
            - MeterSubTypeCold
            - MeterSubTypeHeat
            - MeterSubTypeChargingStation
            - MeterSubTypeElectricity
            - MeterSubTypeWater
            - MeterSubTypeGas
            - MeterSubTypeElectricityHeat
            - MeterSubTypeTemperature
            - MeterSubTypeVirtualBattery
          type: string
        ActivePower:
          format: double
          description: The Active Power or current flow rate. In kW or m3/h
          type: number
        CounterReading:
          format: double
          description: The Meter Counter Reading (Total Energy used) in kWh or m3.
          type: number
        CounterReadingT1:
          format: double
          description: The Meter Counter Reading Tariff 1 in kWh or m3.
          type: number
        CounterReadingT2:
          format: double
          description: The Meter Counter Reading Tariff 2 in kWh or m3.
          type: number
        CounterReadingExport:
          format: double
          description: The Meter Counter Reading only export
          type: number
        CounterReadingExportT1:
          format: double
          description: The Meter Counter Reading only export (Tariff 1)
          type: number
        CounterReadingExportT2:
          format: double
          description: The Meter Counter Reading only export (Tariff 2)
          type: number
        Temperature:
          format: double
          description: The Temperature (in degree celsius)
          type: number
        ValueDate:
          format: date-time
          description: The Date of the Value (in UTC). If this is null the Server Time is
            used.
          type: string
        Voltage:
          format: double
          description: The Voltage (in V)
          type: number
        VoltageL1:
          format: double
          description: The Voltage Phase L1 (in V)
          type: number
        VoltageL2:
          format: double
          description: The Voltage Phase L2 (in V)
          type: number
        VoltageL3:
          format: double
          description: The Voltage Phase L3 (in V)
          type: number
        Current:
          format: double
          description: The Current (in A)
          type: number
        CurrentL1:
          format: double
          description: The Current Phase L1 (in A)
          type: number
        CurrentL2:
          format: double
          description: The Current Phase L2 (in A)
          type: number
        CurrentL3:
          format: double
          description: The Current Phase L3 (in A)
          type: number
        PowerFactor:
          format: double
          description: "The Power Factor (cos phi). Range: 0 - 1"
          type: number
        PowerFactorL1:
          format: double
          description: "The Power Factor (cos phi) Phase L1. Range: 0 - 1"
          type: number
        PowerFactorL2:
          format: double
          description: "The Power Factor (cos phi) Phase L2. Range: 0 - 1"
          type: number
        PowerFactorL3:
          format: double
          description: "The Power Factor (cos phi) Phase L3. Range: 0 - 1"
          type: number
        DigitalInput1:
          description: The digital input number 1
          type: boolean
    FolderData:
      description: Container class for the folder API
      type: object
      properties:
        ElectricityCounterValue:
          format: double
          description: The Counter values for electricity (kWh)
          type: number
        ElectricityPower:
          format: double
          description: The Power for electricity (kW)
          type: number
        HeatCounterValue:
          format: double
          description: The Counter values for Heat (kWh)
          type: number
        HeatPower:
          format: double
          description: The Power for Heat (kW)
          type: number
        WaterCounterValue:
          format: double
          description: The Counter values for Water (m3)
          type: number
        WaterFlowRate:
          format: double
          description: The Flow Rate for Water (m3/h)
          type: number
        GasCounterValue:
          format: double
          description: The Counter values for Gas (m3)
          type: number
        GasFlowRate:
          format: double
          description: The Flow Rate for Gas (m3/h)
          type: number
    FolderMenuConfiguration:
      description: Container Class for the Web API representing a folder menu and it's items
      type: object
      properties:
        Items:
          type: array
          items:
            $ref: "#/components/schemas/FolderMenuItem"
        BrowserUtcTime:
          description: The UTC time taken from the browser
          type: string
        BrowserTimeZoneName:
          description: The time zone name taken from the browser
          type: string
    FolderMenuItem:
      description: A folder menu item
      type: object
      properties:
        Id:
          description: The id of the folder menu item
          type: string
        Name:
          description: The Name of the item
          type: string
        Description:
          description: The Description of the folder
          type: string
        Children:
          description: Children folder menu items (sub folder menu items)
          type: array
          items:
            $ref: "#/components/schemas/FolderMenuItem"
        FolderType:
          description: The folder type of the item
          enum:
            - Folder
            - Location
            - Factory
            - House
            - Office
            - Machine
            - VirtualMeter
            - ElecticityFolder
            - WaterFolder
            - HeatFolder
            - GasFolder
            - TemperatureFolder
            - Sun
            - Light
            - Ice
            - Sofa
            - Food
            - Coffee
            - Car
            - ChargingStation
            - Meter
            - User
            - Trash
            - GridPhotovoltaicPowerSystem
          type: string
        Icon:
          description: The path to the Icon of this folder
          type: string
        UserId:
          description: The ID of the user of this folder (only for foldertype user)
          type: string
        MeterSerialNumber:
          description: "The serial number if the folder menu item is a meter. \r

            \            Serial number is handled as a string, as
            javascript on client side cannot handle long integers properly."
          type: string
        AutoExportSettings:
          $ref: "#/components/schemas/AutoExportSettings"
    AutoExportSettings:
      description: Settings for the auto export functionality of a meter
      type: object
      properties:
        MeterPointId:
          description: The meter point id set by the user
          type: string
        ExportFormat:
          description: The export format
          type: string
        UploadType:
          description: The upload type
          type: string
        ExportInterval:
          description: The export interval of the auto export
          enum:
            - NoExport
            - Hourly
            - Daily
            - Weekly
            - Monthly
            - QuaterYearly
            - HalfYearly
            - Yearly
          type: string
    FolderSettings:
      description: Container for the folder settings
      type: object
      properties:
        Name:
          description: The Name of the folder or meter
          type: string
        Description:
          description: The Description of the folder or meter
          type: string
        FolderType:
          description: The Type of the folder
          enum:
            - Folder
            - Location
            - Factory
            - House
            - Office
            - Machine
            - VirtualMeter
            - ElecticityFolder
            - WaterFolder
            - HeatFolder
            - GasFolder
            - TemperatureFolder
            - Sun
            - Light
            - Ice
            - Sofa
            - Food
            - Coffee
            - Car
            - ChargingStation
            - Meter
            - User
            - Trash
            - GridPhotovoltaicPowerSystem
          type: string
        SerialNumber:
          format: int64
          description: The serial number (meter only)
          type: integer
        Enable:
          description: Flag if the meter is enabled (folder not supported yet)
          type: boolean
        ValueCorrection:
          format: double
          description: The value correction on this meter
          type: number
        ValueCorrectionParentFolder:
          format: double
          description: The value correction on all parent folders. but not on the meter
            itself
          type: number
        UseableForVirtualBillingMeters:
          description: Flag if the meter is usable for virtual billing meters (e.g.
            washroom)
          type: boolean
        ParentFolderId:
          description: The parent folder ID of this item
          type: string
        VisualizationName:
          description: The name of the visualization of the folder
          type: string
    MBusData:
      type: object
      properties:
        Date:
          format: date-time
          description: The Date of the M-BUS Telegram Readout (in UTC). If this is null the
            Server Time is used.
          type: string
        Telegram:
          description: "The M-BUS Telegram as Hex string. \r

            \            Example: 68 1F 1F 68 08 02 72 78 56 34 12
            24 40 01 07 55 00 00 00 03 13 15 31 00 DA 02 3B 13 01 8B 60 04 37 18
            02 18 16"
          type: string
    MeterFolderInformation:
      description: Container Class for the Web API
      type: object
      properties:
        Name:
          description: Name of the Meter or Folder
          type: string
        IsFolder:
          description: Flag if it's a Folder or a Meter
          type: boolean
        OutputInformations:
          description: Informations about the available Outputs
          type: array
          items:
            $ref: "#/components/schemas/OutputInformation"
        InputInformations:
          description: Informations about the available Inputs
          type: array
          items:
            $ref: "#/components/schemas/InputInformation"
        HardwareVersion:
          format: int32
          description: The Hardware Version of a Meter.
          type: integer
        FirmwareVersion:
          format: int32
          description: The Firmware Version of a Meter
          type: integer
        CommunicationModuleHardwareVersion:
          format: int32
          description: The Version of the Communication Module (if exists)
          type: integer
        CommunicationModuleFirmwareVersion:
          format: int32
          description: The Version of the Communication Module (if exists)
          type: integer
    OutputInformation:
      description: Informations about the Outputs of a Meter or Folder
      type: object
      properties:
        Number:
          format: int32
          description: The Number of this Output. Use this as ID to switch it on or off.
          type: integer
        Name:
          description: The Name of the Output
          type: string
        ObisCode:
          description: The Obis Code for this Output
          type: string
        ActionType:
          description: The type of the Output
          enum:
            - OnOffAction
            - AnalogAction
          type: string
    InputInformation:
      description: Informations about the Inputs of a Meter or Folder
      type: object
      properties:
        Number:
          format: int32
          description: The Number of this Input. Use this as ID to switch it on or off.
          type: integer
        Name:
          description: The Name of the Input
          type: string
    MeterFolderInformationToPost:
      description: Container for a Meter or Folder Information to Post
      type: object
      properties:
        Id:
          description: The ID of the device or folder
          type: string
        Name:
          description: Name of the Meter or Folder
          type: string
    DeviceInPast:
      description: Container Class for the Web API. Conatinas the MeterValues in the Past
      type: object
      properties:
        Id:
          description: The ID of the device
          type: string
        Serial:
          format: int64
          description: The Serial number
          type: integer
        Date:
          format: date-time
          description: The Date of the Values
          type: string
        CounterReading:
          format: double
          description: The Meter Counter Reading (Total Energy used)
          type: number
        CounterReadingUnit:
          description: The Unit of the Counter Reading
          type: string
        CounterReadingT1:
          format: double
          description: The Meter Counter Reading Tariff 1
          type: number
        CounterReadingT2:
          format: double
          description: The Meter Counter Reading Tariff 2
          type: number
        CounterReadingT3:
          format: double
          description: The Meter Counter Reading Tariff 3
          type: number
        CounterReadingT4:
          format: double
          description: The Meter Counter Reading Tariff 4
          type: number
        CounterReadingImport:
          format: double
          description: The Meter Counter Reading Import
          type: number
        CounterReadingImportT1:
          format: double
          description: The Meter Counter Reading Import Tariff 1
          type: number
        CounterReadingImportT2:
          format: double
          description: The Meter Counter Reading Import Tariff 2
          type: number
        CounterReadingImportT3:
          format: double
          description: The Meter Counter Reading Import Tariff 3
          type: number
        CounterReadingImportT4:
          format: double
          description: The Meter Counter Reading Import Tariff 4
          type: number
        CounterReadingExport:
          format: double
          description: The Meter Counter Reading Export
          type: number
        CounterReadingExportT1:
          format: double
          description: The Meter Counter Reading Export Tariff 1
          type: number
        CounterReadingExportT2:
          format: double
          description: The Meter Counter Reading Export Tariff 2
          type: number
        CounterReadingExportT3:
          format: double
          description: The Meter Counter Reading Export Tariff 3
          type: number
        CounterReadingExportT4:
          format: double
          description: The Meter Counter Reading Export Tariff 4
          type: number
    PicoChargingData:
      description: Container class for the pico charging station API
      type: object
      properties:
        State:
          description: The state of the charging station
          enum:
            - Booting
            - ReadyNoCarConnected
            - ReadyCarConnected
            - StartedWaitForCar
            - Charging
            - Installation
            - Authorize
            - Offline
          type: string
          readOnly: true
        ActiveChargingPower:
          format: double
          description: The power of the active charging (in kW)
          type: number
        ActiveChargingEnergy:
          format: double
          description: The energy used by this active charging (in kWh)
          type: number
        Duration:
          format: int32
          description: The duration of this charging in seconds
          type: integer
        ValueDate:
          format: date-time
          description: The date of this values
          type: string
        MaxAllowedChargingCurrent:
          format: int32
          description: Max allowed charging current in A
          type: integer
        MinStationCurrent:
          format: int32
          description: Min. current of the station in A
          type: integer
        MaxStationCurrent:
          format: int32
          description: Max. current of the station in A
          type: integer
        MaxLoadmanagementGroupCurrent:
          format: int32
          description: Max. current of the loadmanagement group of this station (if there
            is any) in A
          type: integer
        MaxDynamicCurrent:
          format: int32
          description: Max. dynamic current (e.g. set over API or Modbus TCP) of this
            station or the loadmanagement group of the station if the station is
            in a group. in A
          type: integer
        LoadSheddingState:
          description: Max. dynamic current (e.g. set over API or Modbus TCP) of this
            station or the loadmanagement group of the station if the station is
            in a group. in A
          enum:
            - MaxCurrent
            - HalfCurrent
            - MinCurrent
            - NoCurrent
          type: string
        LoadmanagementGroupName:
          description: The name of the loadmanagement group. Or string.empty if the station
            is not in a group
          type: string
        ConnectionMode:
          description: The mode how this station is connected to the cloud
          enum:
            - NetworkToCloudConnectionMode_NoConnection
            - NetworkToCloudConnectionMode_DirectWiFiConnection
            - NetworkToCloudConnectionMode_GPRSConnection
            - NetworkToCloudConnectionMode_NBIotConnection
            - NetworkToCloudConnectionMode_LteCatM1Connection
            - NetworkToCloudConnectionMode_MeshWiFiConnection
            - NetworkToCloudConnectionMode_MeshMobileConnection
          type: string
    PicoChargingHistoryData:
      description: Api container for the charging station history
      type: object
      properties:
        StartTime:
          format: date-time
          description: The starttime of the charging (in UTC)
          type: string
        Duration:
          format: int32
          description: The duration in seconds
          type: integer
        EnergyUsed:
          format: double
          description: The energy used (in kWh)
          type: number
    PicoLoadmanagementGroupDto:
      description: DTO for the pico loadmanagement group
      type: object
      properties:
        Id:
          description: The ID of the loadmanagement group
          type: string
        Name:
          description: The name of the station
          type: string
        MaxCurrent:
          format: double
          description: The max current of this loadmanagement group
          type: number
        NumberOfStations:
          format: int32
          description: The number of assigned stations
          type: integer
    PicoSettingsDto:
      description: DTO for the pico charging station settings
      type: object
      properties:
        Name:
          description: The name of the station
          type: string
        SerialNumber:
          description: The Serial number of the station
          type: string
        AuthenticationType:
          description: The authentication type
          enum:
            - None
            - Backend
          type: string
        DisplayBrightness:
          format: byte
          description: The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum
          type: string
        MinCurrent:
          format: int32
          description: The max current of this station (in A)
          type: integer
        MaxCurrent:
          format: int32
          description: The max current of this station (in A)
          type: integer
        IdleImageData:
          description: The base 64 string for the "no car connected" image
          type: string
        IdleImageUrl:
          description: The url of the idle image
          type: string
        LoadmanagementGroupId:
          description: The ID of the loadmanagement group
          type: string
        ModbusTcp:
          description: Flag if ModbusTcp is enabled
          type: boolean
        CarIdDetection:
          description: Flag if the car id detection is enabled
          type: boolean
        InternalIp:
          description: The internal IP address
          type: string
        DnsName:
          description: The DNS name of the pico's internal ip
          type: string
    RegisterRealtimeApiData:
      description: Container class for the register realtime API API
      type: object
      properties:
        Id:
          description: The ID of the registration
          type: string
        RegistrationType:
          description: The Type of this registration (per meter, per user, ...)
          enum:
            - Disabled
            - SingleMeterRegistration
            - UserRegistration
          type: string
        MeterId:
          description: The ID of the Meter. Just used if the RegistrationType is
            "SingleMeterRegistration".
          type: string
        SerialNumber:
          description: "The serial number of the Meter. Just used if the RegistrationType
            is \"SingleMeterRegistration\" and the MeterId is null. \r

            \            Example: 1 SME 01 63000000 or 6300000"
          type: string
        ApiUrl:
          description: The URL of your endpoint. To this endpoint all the values are send
            to.
          type: string
        BasicAuthUsername:
          description: The Username (basic auth) of your endpoint. Leave empty of none.
          type: string
        BasicAuthPassword:
          description: The Password (basic auth) of your endpoint. Leave empty of none.
          type: string
    SmartMeDeviceConfigurationContainer:
      description: API Container class for the meter configuration
      type: object
      properties:
        Id:
          description: The ID of the device
          type: string
        UploadInterval:
          description: Number of seconds the device will upload the data. For smaller
            values maybe a professional license is needed.
          enum:
            - UploadInterval_1s
            - UploadInterval_5s
            - UploadInterval_10s
            - UploadInterval_30s
            - UploadInterval_60s
            - UploadInterval_5min
            - UploadInterval_15min
            - UploadInterval_30min
            - UploadInterval_60min
            - UploadInterval_6h
            - UploadInterval_12h
            - UploadInterval_24h
          type: string
        SwitchConfiguration:
          description: The configuration for the phase switches
          type: array
          items:
            $ref: "#/components/schemas/SwitchConfigurationContainer"
        OutputConfiguration:
          description: The configuration for the external outputs
          type: array
          items:
            $ref: "#/components/schemas/OutputConfigurationContainer"
        InputConfiguration:
          description: The configuration for the intput outputs
          type: array
          items:
            $ref: "#/components/schemas/InputConfigurationContainer"
        ShowReactiveEnergy:
          description: Shows the reactive energy values (if the meter supports it).
          type: boolean
        EnableModbusTcp:
          description: Enables or disables Modbus TCP (if the meter supports it).
          type: boolean
        DnsUpdateState:
          description: "Configuration of the dynamic DNS service. More information:
            http://wiki.smart-me.com/index.php/Dynamisches_DNS"
          enum:
            - NoUpdate
            - DnsUpdatePublicIp
            - DnsUpdateInternalIp
          type: string
        DevicePinCode:
          description: PIN code to enter on a external meter (e.g. for the FNN meters)
          type: string
        DeviceEncryptionKey:
          description: The encryption key used to decrypt messages received from an
            external meter (used only for the smart-me modules)
          type: string
    SwitchConfigurationContainer:
      description: The configuration for a phase switch
      type: object
      properties:
        Number:
          format: int32
          description: The number of the phase. (e.g. 1 for Phase L1)
          type: integer
        CanSwitchOff:
          description: Flag if the switch can be turned off or is always on.
          type: boolean
    OutputConfigurationContainer:
      description: Configuration for the outputs of a meter (analog/digital outputs)
      type: object
      properties:
        Number:
          format: int32
          description: The number of the Output. (1 for Output 1, 2 for Output 2)
          type: integer
        Name:
          description: The Name of the Output
          type: string
        Type:
          description: The Type of the output
          enum:
            - ImpulseOutputActiveEnergy
            - ImpulseOutputActiveEnergyImport
            - ImpulseOutputActiveEnergyExport
            - ImpulseOutputReactiveEnergy
            - DigitalOutput
            - AnalogPwmSignalOutput
            - Disabled
          type: string
        DigitalOutputNoConnectionAction:
          description: The Action when the device has lost the connection
          enum:
            - Nothing
            - TurnOff
            - TurnOn
            - SetPwmValue
          type: string
        S0PulseValue:
          description: The S0 Pulse Value
          enum:
            - PulseValue1000Kwh
            - PulseValue10000Kwh
          type: string
    InputConfigurationContainer:
      description: Configuration for the input of a meter (digital inputs)
      type: object
      properties:
        Number:
          format: int32
          description: The number of the Input. (1 for Input 1)
          type: integer
        Name:
          description: The Name of the Input
          type: string
        Type:
          description: The Type of the output
          enum:
            - TariffInput
            - DigitalInput
          type: string
        OnText:
          description: The visualization text for an ON action
          type: string
        OffText:
          description: The visualization text for an OFF action
          type: string
    SubUserData:
      description: Container data for the sub user
      type: object
      properties:
        Id:
          description: The ID of the user
          type: string
        Username:
          description: The username
          type: string
        Email:
          description: The Email adress
          type: string
        PermissionLevel:
          description: The permission level of the user
          enum:
            - SelectedFolderAndSubfoldersMeters
            - SelectedFolderOnly
          type: string
        AccessTimeStartDate:
          format: date-time
          description: The start date. From this date the user has access
          type: string
        AccessEndDate:
          format: date-time
          description: The end date. until this date the user has access
          type: string
        NewPassword:
          description: If set this is used a new password
          type: string
    User:
      description: Container Class for the Web API
      type: object
      properties:
        Id:
          format: int64
          description: The ID of the User
          type: integer
        IdAsString:
          description: The ID of the user as string
          type: string
        Username:
          description: The Username of the User
          type: string
        Email:
          description: The EMail Address of the User
          type: string
        IsAdmin:
          description: Flag if this User is an Admin User
          type: boolean
        Permissions:
          description: Additional Permissions
          type: array
          items:
            type: string
        ChildUsers:
          description: The Users created by this users.
          type: array
          items:
            $ref: "#/components/schemas/User"
    ValuesData:
      description: API Container for a Meter Value
      type: object
      properties:
        DeviceId:
          description: The ID of the device
          type: string
        Date:
          format: date-time
          description: The Date of the Value
          type: string
        Values:
          description: All values
          type: array
          items:
            $ref: "#/components/schemas/ValueData"
    ValueData:
      description: API Container for a (Device) Value
      type: object
      properties:
        Obis:
          description: "The Obis code of this value. \r

            \            A description you can find here:\r

            \            http://wiki.smart-me.com/index.php/Obis_co\
            des"
          type: string
        Value:
          format: double
          description: The Value
          type: number
    VMeterToActivate:
      description: Actives a virtual Meter
      type: object
      properties:
        SerialNumber:
          description: The Serialnumber of the Meter to activate.
          type: string
    VMeterToDeactivate:
      description: Deactivates a virtual Meter
      type: object
      properties:
        ID:
          description: The ID of the Virtual meter to deactivate
          type: string
    VirtualTariffsOfFolder:
      description: Container class for a Virtual Tariff
      type: object
      properties:
        FolderId:
          description: The ID of the Folder
          type: string
        Name:
          description: The name of this folder
          type: string
        Date:
          format: date-time
          description: The DateTime (UTC) of this virtual tarfifs
          type: string
        VirtualTariffs:
          description: The Name of the Virtual Tariff
          type: array
          items:
            $ref: "#/components/schemas/VirtualTariff"
    VirtualTariff:
      description: Container class for the virtual tariffs
      type: object
      properties:
        Id:
          description: The ID of the virtual tariff
          type: string
        Name:
          description: The name of this tariff
          type: string
        Value:
          format: double
          description: The Counter Value of this tariff
          type: number
        Unit:
          description: The Unit of this value
          type: string
        Factor:
          format: double
          description: Says how many of the active power is used in this tariff. This is
            calculated from the last meter values.
          type: number
        Type:
          description: The Type of the tariff
          enum:
            - Battery
            - Solar
            - Normal
          type: string
    VirtualTariffConsumptionData:
      description: Container class for the virtual tariff consumption
      type: object
      properties:
        Name:
          description: The Name of this virtual tariff
          type: string
        TariffType:
          description: The type of the virtual tariff (e.g. solar)
          enum:
            - Battery
            - Solar
            - Normal
          type: string
        Consumption:
          format: double
          description: The consumption (e.g. kWh) of this tariff
          type: number
        Price:
          format: double
          description: The price of the energy in this timerange
          type: number
        Currency:
          description: The currency of the price
          type: string
