/*
 * Copyright (C) 2019-2021 ConnectorIO Sp. z o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package org.connectorio.automation.period.internal.type;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.connectorio.automation.period.PeriodTriggerConstants;
import org.connectorio.chrono.Period;
import org.openhab.core.automation.Visibility;
import org.openhab.core.automation.type.Output;
import org.openhab.core.automation.type.TriggerType;
import org.openhab.core.config.core.ConfigDescriptionParameter;
import org.openhab.core.config.core.ConfigDescriptionParameter.Type;
import org.openhab.core.config.core.ConfigDescriptionParameterBuilder;
import org.openhab.core.config.core.ParameterOption;

public class PeriodTriggerType extends TriggerType {

  public static final PeriodTriggerType INSTANCE = new PeriodTriggerType();

  public PeriodTriggerType() {
    this(createConfigDescription(), createOutputs());
  }

  public PeriodTriggerType(List<ConfigDescriptionParameter> configDescriptionParameters, List<Output> outputs) {
    super(PeriodTriggerConstants.MODULE_TYPE_ID,
      configDescriptionParameters,
      "Period trigger",
      "This trigger allows to trigger an action on schedule basis - hourly, daily, weekly, monthly or yearly",
      null,
      Visibility.VISIBLE,
      outputs
    );
  }

  private static List<ConfigDescriptionParameter> createConfigDescription() {
    List<ParameterOption> options = Arrays.stream(Period.values())
      .map(period -> new ParameterOption(period.name(), period.getLabel()))
      .collect(Collectors.toList());

    return Arrays.asList(
      ConfigDescriptionParameterBuilder.create("period", Type.TEXT).withLabel("Period")
        .withDescription("Determine frequency of triggers generated by this element.")
        .withDefault("DAY")
        .withRequired(true)
        .withOptions(options)
        .build()
    );
  }

  private static List<Output> createOutputs() {
    return Arrays.asList(
      new Output(PeriodTriggerConstants.PREVIOUS_TRIGGER_TIME, Instant.class.getName()),
      new Output(PeriodTriggerConstants.TRIGGER_TIME, Instant.class.getName())
    );
  }

}
